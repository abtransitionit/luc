run: |
    curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
         https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ steps.get_run_id.outputs.run_id }}/artifacts > artifacts.json
    cat artifacts.json



- name: Fetch Workflow A's Artifact
  run: |
    gh run download ${{ github.event.workflow_run.id }} --dir=downloaded-artifacts
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


gh run download $RUN_ID --artifact="artifact-name"


- name: Download Workflow A's Artifact  
  run: |  
    # Get Workflow A's run ID (if triggered by it)  
    RUN_ID=${{ github.event.workflow_run.id }}  

    # Use GitHub API to download artifact  
    gh run download $RUN_ID --artifact=my-data  
  env:  
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  





      - name: Build the artifact
        env:
          ARTIFACT_NAME: ${{ ARTIFACT_BASE_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
        run: go build -v -buildvcs=false -o ${{ env.ARTIFACT_BASE_NAME }} # workaround since go 1.18+
        run: GOOS=$(go env GOOS) GOARCH=$(go env GOOS) go build -o ${{ env.ARTIFACT_NAME }}



      - name: Check Tagged commit is checked out commit 
        run: |
          echo "Commit of dependency workflow: ${{ github.event.workflow_run.head_sha }}"
          echo "checked out commit:            ${{ github.sha }}"
          // check it is the same


      - name: check current folder
        run: pwd ; ls -la

      - name: Build the artifact 
        run: go build -v -buildvcs=false -o ${{ env.ARTIFACT_BASE_NAME }} # workaround since go 1.18+

      - name: check binary is built
        run: ls -lh ${{ env.ARTIFACT_BASE_NAME }}

      - name: Upload artifact             # in artifact section of the workflow instance
        uses: actions/upload-artifact@v4  # https://github.com/actions/upload-artifact
        with:
          name: ${{ env.ARTIFACT_BASE_NAME }}-${{ steps.githubenv.outputs.GOOS }}-${{ steps.githubenv.outputs.GOARCH }}  # e.g. "luc-linux-arm64"   
          path: ${{ env.ARTIFACT_BASE_NAME }} # the src artifact




  build-other-artifacts:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # This job is triggered when the dependency workflow completes and success
    runs-on: ubuntu-latest  # denote a VM
    env:
      ARTIFACT_NAME: luc-${{ matrix.goos }}-${{ matrix.goarch }}
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [arm64]
    steps:
      - name: Checkout git repo     # clone current git repository
        uses: actions/checkout@v4   # https://github.com/actions/checkout

      - name: Build
        run: GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ env.ARTIFACT_NAME }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}





env:
  CURRENT_BRANCH: ${{ github.ref_name }}  # For pushes (e.g., 'main')
  # OR for pull requests:
  CURRENT_BRANCH: ${{ github.head_ref }}  # PR branch (e.g., 'feature-xyz')

      - name: define var TAG_NAME           # and put it in the github env
        id: tagname
        run: echo "TAG_NAME=${VERSION}-${BRANCH_NAME}" >> $GITHUB_ENV



      - name: Save the tag in a file in the the repo     # for sharing with another workflow
        run: |
          echo "${{ env.TAG_NAME }}" >> ${{ env.TAG_FILEPATH }}
          git add ${{ env.TAG_FILEPATH }}      # Stages the change
          git commit -m "Update tag auto"      # Commits the new content
          git push                             # Pushes the updated file          

      - name: summary     # allow to attach this wrokflow instance to the caller
        run: |
          echo "Branch:   ${{ github.event.workflow_run.head_branch }}"
          echo "Commit:   ${{ github.event.workflow_run.head_sha }}"
          echo "Tag name: ${{ env.TAG_NAME }}"

      # - name: define var VERSION to v0.0.1 # and put it in the github env (like other env vars) 
      #   id: tagversion
      #   run: echo "VERSION=v0.0.1" >> $GITHUB_ENV




# - name: Create the tag ${{ env.TAG_NAME }} # fails if tag already exists
#   run: |
#     git tag "${{ env.TAG_NAME }}"

# - name: Push the tag ${{ env.TAG_NAME }}
#   env:
#     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   run: |
#     git push origin "${{ env.TAG_NAME }}"

# - name: Upload file as artifact section of the workflow instance
#   uses: actions/upload-artifact@v4
#   with:
#     name: tag-name                  # the dst artifact name/id - zip the file
#     path: ${{ env.TAG_FILENAME }}   # the src artifact



# on:
#   push:
#     tags:
#       - '*'  # on any new pushed tag (new or force-pushed).



# jobs:
#   create-release:
#     if: ${{ github.event.workflow_run.conclusion == 'success' }}
#     runs-on: ubuntu-latest     # the VM
#     env:
#       TAG_NAME: ${{ github.ref_name }}   # Tag that triggered the workflow
#     steps:
#       - name: Create release for tag ${{ env.TAG_NAME }}    
#         run: |
#           echo "Tag that triggered and used for this release : ${{ env.TAG_NAME }}"
#       - name: Create The Release
#         uses: softprops/action-gh-release@v1  # https://github.com/softprops/action-gh-release
#         with:
#           tag_name: ${{ env.TAG_NAME }}    # tag that triggered the workflow
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# TAG_FILEPATH: ./tag-${{ github.run_id }}

# - name: download artifact into a local folder from previous workflow
#   uses: actions/download-artifact@v4
#   with:
#     path: ${{ env.TAG_PATH }}   # local folder into extract the file - no concurent conflict
#     # name: tag-name            # must match the uploaded artifact name






# Using Github API in Github actions


# Build a go artifact
# - use a VM container image capabilities
name: Build

on:
  workflow_run: # This workflow is triggered when the workflow completes (success or failure). 
    workflows:
      - Tag     # the name of the workflow to completes (inside the yaml)
    types:
      - completed

jobs:
  vm-info:
    runs-on: ubuntu-latest # denote a VM
    steps:
      - name: display host config
        run: cat /proc/1/cgroup

      - name: display os config
        run: cat /etc/os-release

      - name: Check Go version
        run: go version

  container-info:
    runs-on: ubuntu-latest # denote a VM
    container:              # denote a VM container
      image: golang:1.24
    steps:
      - name: display host config
        run: cat /proc/1/cgroup

      - name: display os config
        run: cat /etc/os-release

  build-artifact-inside-container:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # This job is triggered when the dependency workflow completes and success
    runs-on: ubuntu-latest  # denote a VM
    container:              # denote a VM container
      image: golang:1.24
    env:
      ARTIFACT_BASE_NAME: luc  # define variable here
    steps:
      - name: define vars GOOS AND GOARCH
        id: githubenv
        run: |
          echo "GOOS=$(go env GOOS)"     >> $GITHUB_OUTPUT
          echo "GOARCH=$(go env GOARCH)" >> $GITHUB_OUTPUT

      - name: Checkout git repo     # clone current git repository
        uses: actions/checkout@v4   # https://github.com/actions/checkout

