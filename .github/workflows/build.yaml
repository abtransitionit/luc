# purpose: build artifacts for several platform
# trigger: after workflow "Tag" completes with success
name: Build

on:
  workflow_run: # This workflow is triggered when the workflow completes (success or failure). 
    workflows:
      - Tag     # the name of the workflow to completes (inside the yaml)
    types:
      - completed

jobs:
  build-principal-artifact: 
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # This job is triggered when the dependency workflow completes and success
    runs-on: ubuntu-latest  # denote a default provisioned VM
    container:              # denote a VM container - allows to define a custom go version
      image: golang:1.24
    env:
      ARTIFACT_BASE_NAME: luc  # define variable here
    steps:
      - name: define vars GOOS AND GOARCH
        id: githubenv
        run: |
          echo "GOOS=$(go env GOOS)"     >> $GITHUB_OUTPUT
          echo "GOARCH=$(go env GOARCH)" >> $GITHUB_OUTPUT

      - name: checkout the current git repo
        uses: actions/checkout@v4

      - name: Check Tagged commit is current checked out commit # normally obvious but in concurent build may occurs
        env:
          TCommit: ${{ github.event.workflow_run.head_sha }}  # Tag commit
          BCommit: ${{ github.sha }}                          # Build checked out commit
        run: |
          echo "Commit of dependency workflow: ${TCommit}"
          echo "checked out commit:            ${BCommit}"
          if [ "${TCommit}" != "${BCommit}" ]; then
            echo "❌ Commit mismatch!"
            exit 1
          else
            echo "✅ Commit verified with success"
          fi

      - name: Build the principal artifact # into the container
        id: buildprincipal
        env:
          ARTIFACT_NAME: ${{ env.ARTIFACT_BASE_NAME }}-${{ steps.githubenv.outputs.GOOS }}-${{ steps.githubenv.outputs.GOARCH }} # e.g. "luc-linux-arm64"   
        run: |
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}"     >> $GITHUB_OUTPUT
          go build -v -buildvcs=false -o ${ARTIFACT_NAME} # (buildvcs) workaround since go 1.18+

      - name: Upload artifact             # in artifact section of the workflow instance
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.buildprincipal.outputs.ARTIFACT_NAME }} # the dst artifact
          path: ${{ steps.buildprincipal.outputs.ARTIFACT_NAME }} # the src artifact

  build-other-plaform-artifacts:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # This job is triggered when the dependency workflow completes and success
    runs-on: ubuntu-latest  # denote a VM
    env:
      ARTIFACT_NAME: luc-${{ matrix.goos }}-${{ matrix.goarch }}
    strategy:
      matrix:   # generate a set of tuples
        goos: [linux, darwin]
        goarch: [arm64]
    steps:      # on run for each tuple
      - name: Checkout git repo     # clone current git repository
        uses: actions/checkout@v4   # https://github.com/actions/checkout

      - name: Build
        run: GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ env.ARTIFACT_NAME }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}