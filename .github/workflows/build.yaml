# Build a go artifact
# - use a VM container image capabilities
# - as it is triggered by tag.yaml, it automatically checkout the repo associated to that TAG
# - To be sure just display the commit
name: Build

on:
  workflow_run: # This workflow is triggered when the workflow completes (success or failure). 
    workflows:
      - Tag     # the name of the workflow to completes (inside the yaml)
    types:
      - completed

jobs:
  vm-info:
    runs-on: ubuntu-latest # denote a VM
    steps:
      - name: display host config
        run: cat /proc/1/cgroup

      - name: display os config
        run: cat /etc/os-release

      - name: Check Go version
        run: go version

  container-info:
    runs-on: ubuntu-latest # denote a VM
    container:              # denote a VM container
      image: golang:1.24
    steps:
      - name: display host config
        run: cat /proc/1/cgroup

      - name: display os config
        run: cat /etc/os-release

  build-artifact-inside-container:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # This job is triggered when the dependency workflow completes and success
    runs-on: ubuntu-latest  # denote a VM
    container:              # denote a VM container
      image: golang:1.24
    env:
      ARTIFACT_BASE_NAME: luc  # define variable here
    steps:
      - name: define vars GOOS AND GOARCH
        id: githubenv
        run: |
          echo "GOOS=$(go env GOOS)"     >> $GITHUB_OUTPUT
          echo "GOARCH=$(go env GOARCH)" >> $GITHUB_OUTPUT

      - name: Checkout git repo     # clone current git repository
        uses: actions/checkout@v4   # https://github.com/actions/checkout

      - name: Check Tagged commit is current checked out commit # normally obvious but in concurent build may occurs
        env:
          TCommit: ${{ github.event.workflow_run.head_sha }}  # Tag commit
          BCommit: ${{ github.sha }}                          # Build checked out commit
        run: |
          echo "Commit of dependency workflow: ${TCommit}"
          echo "checked out commit:            ${BCommit}"
          if [ "${TCommit}" != "${BCommit}" ]; then
            echo "❌ Commit mismatch!"
            exit 1
          else
            echo "✅ Commit verified with success"
          fi

      - name: Build the artifact 
        env:
          ARTIFACT_NAME: ${{ env.ARTIFACT_BASE_NAME }}-${{ steps.githubenv.outputs.GOOS }}-${{ steps.githubenv.outputs.GOARCH }} # e.g. "luc-linux-arm64"   
        run: go build -v -buildvcs=false -o ${{ ARTIFACT_BASE_NAME }} # (buildvcs) workaround since go 1.18+

      - name: Upload artifact             # in artifact section of the workflow instance
        env:
          ARTIFACT_NAME: ${{ env.ARTIFACT_BASE_NAME }}-${{ steps.githubenv.outputs.GOOS }}-${{ steps.githubenv.outputs.GOARCH }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }} # the dst artifact
          path: ${{ env.ARTIFACT_NAME }} # the src artifact
