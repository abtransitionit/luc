/*
Copyright © 2025 AB TRANSITION IT abtransitionit@hotmail.com
*/
package cpluc

import (
	"fmt"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/abtransitionit/luc/pkg/logx"
)

func mvLucRemote(in <-chan PipelineData, out chan<- PipelineData, vmList string) {
	vms := strings.Fields(vmList) // convert ListAsString to slice
	nbWorker := len(vms)
	var wg sync.WaitGroup
	defer close(out)

	// Worker function
	worker := func() {
		defer wg.Done()
		for data := range in {
			if data.Err != nil {
				out <- data
				logx.L.Debugf("❌ Previous error detected")
				continue
			}

			// Wait until file exists and is accessible
			for {
				_, err := os.Stat(data.remoteTmpPath)
				if err == nil {
					break // file exists
				}
				if !os.IsNotExist(err) {
					// not a "not exist" error → something else is wrong
					data.Err = fmt.Errorf("unexpected error accessing file: %w", err)
					out <- data
					return
				}
				time.Sleep(100 * time.Millisecond)
			}

			// send
			logx.L.Debugf("[%s] mv LUC from remote tmp to remote final path", data.VmName)
			out <- data
		} // for
	} // worker

	// Start N workers
	wg.Add(nbWorker)
	for i := 0; i < nbWorker; i++ {
		go worker()
	}

	wg.Wait()
}
