/*
Copyright Â© 2025 AB TRANSITION IT abtransitionit@hotmail.com
*/

// # Purpose
//
// - provides a structured logger based on Uber's Zap library.
//
// - uses zap.SugaredLogger, which supports printf-style formatting.
//
// # Usage
//
// In main.go:
//
//	logx.Init(true) // true for development, false for production
//
// Anywhere else:
//
//	logx.L.Info("Starting application...")
//	logx.L.Infof("installing %s", cliConf.Name)
//	logx.L.Errorf("Error: %v", err)
package logx

import (
	"fmt"
	"strings"
	"time"

	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
)

// name of the logger that will be used in code
var L *zap.SugaredLogger

// define and congigure the logger - true=dev, false=prod
func Init(dev bool) {

	// define var
	var (
		base *zap.Logger
		cfg  zap.Config
		err  error
	)

	// define the type of logger according to the bool
	if dev {
		base, err = zap.NewDevelopment()
		cfg = devConfig()
	} else {
		base, err = zap.NewProduction()
		cfg = prodConfig()
	}

	// build the logger
	base, err = cfg.Build()

	// error: panic : logger creation MUST succeed
	if err != nil {
		panic(err)
	}
	// Converts the base zap.Logger to a SugaredLogger and assigns it to L
	L = base.Sugar()
}

func devConfig() zap.Config {
	cfg := zap.NewDevelopmentConfig()
	cfg.EncoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder // colored levels for dev
	cfg.EncoderConfig.EncodeTime = func(time.Time, zapcore.PrimitiveArrayEncoder) {
		// This empty function will skip timestamp encoding
	}
	// cfg.EncoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder        // readable time
	cfg.EncoderConfig.EncodeCaller = zapcore.ShortCallerEncoder // short caller info
	cfg.EncoderConfig.EncodeCaller = fixedWidthCallerEncoder

	return cfg
}

func prodConfig() zap.Config {
	cfg := zap.NewProductionConfig()
	cfg.EncoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder // no color, uppercase
	cfg.EncoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder
	cfg.EncoderConfig.EncodeCaller = zapcore.ShortCallerEncoder
	return cfg
}

func fixedWidthCallerEncoder(caller zapcore.EntryCaller, enc zapcore.PrimitiveArrayEncoder) {
	// file := filepath.Base(caller.File)
	file := caller.TrimmedPath()

	// Extract just the function name
	// funcName := caller.Function
	funcParts := strings.Split(caller.Function, ".")
	funcName := funcParts[len(funcParts)-1]
	enc.AppendString(fmt.Sprintf("%10s:%03d %32s", file, caller.Line, funcName))
}

// func fixedWidthCallerEncoder(caller zapcore.EntryCaller, enc zapcore.PrimitiveArrayEncoder) {
// 	const width = 20
// 	s := caller.TrimmedPath() // e.g. "luccore/cli.go:55"

// 	// Pad or trim to width
// 	if len(s) > width {
// 		s = s[:width] // truncate if too long
// 	} else {
// 		// pad with spaces to the right
// 		s = s + strings.Repeat(" ", width - len(s))
// 	}

// 	enc.AppendString(s)
// }

// // prettyCaller formats caller like `file.go:123`
// func prettyCaller(caller zapcore.EntryCaller, enc zapcore.PrimitiveArrayEncoder) {
// 	// filepath.Base to get filename only + line number with fixed width
// 	file := filepath.Base(caller.File)
// 	line := caller.Line
// 	enc.AppendString(fmt.Sprintf("%50s:%53d", file, line))
// }

// usage

// main.go
// logx.Init(true) // true/dev or false/prod mode
// logx.L.Info("starting...")

// // anywhere
// logx.L.Infof("installing %s", cliConf.Name)
// logx.L.Errorf("Error: %v", err)
// logx.Init(true)
// logx.L.Info("Server started")
// logx.L.Errorf("Error: %v", err)
// logx.L.Infof("installing %s", cliConf.Name)
