/*
Copyright © 2025 Amar BELGACEM abtransitionit@hotmail.com
*/
package luccore

import (
	"fmt"
	"os"
	"strings"
)

// Retrieves OS properties based on the UINPUT.
func OsPropertyGet(property string) (stdout string, customErr string, err error) {
	var data string

	switch property {
	case "cgroup":
		output, err := os.ReadFile("/proc/self/cgroup")
		if err != nil {
			customErr = fmt.Sprintf("❌ Error getting cgroup > %s > ", err)
			return "", customErr, err
		}
		if strings.Contains(string(output), "0::/") {
			data = "v2"
		} else {
			data = "v1"
		}
	// case "net-ip":
	// 	cli := fmt.Sprintf("curl -s ifconfig.me -4 ")
	// 	output, _, cErrSrc, errSrc := RunCLILocal(cli)
	// 	if err != nil {
	// 		customErr = fmt.Sprintf("❌ Error getting i > %s > ", cErrSrc)
	// 		return "", customErr, errSrc
	// 	}
	// 	data = output
	// case "net-gateway":
	// 	cli := fmt.Sprintf("ip route get 2.2.2.2")
	// 	output, _, cErrSrc, errSrc := RunCLILocal(cli)
	// 	if err != nil {
	// 		customErr = fmt.Sprintf("❌ Error getting gateway > %s > ", cErrSrc)
	// 		return "", customErr, errSrc
	// 	}
	// 	data = strings.TrimSpace(strings.Split(output, "\n")[0])
	// case "uuid":
	//   cli := fmt.Sprintf("sudo cat /sys/class/dmi/id/product_uuid")
	// 	output, _, cErrSrc, errSrc := RunCLILocal(cli)
	// 	if err != nil { customErr = fmt.Sprintf("❌ Error getting uuid > %s > ", cErrSrc); return "", customErr, errSrc }
	// 	data = fmt.Sprintf("%s", strings.TrimSpace(output))
	// case "vmarch":
	// 	data = fmt.Sprintf("%s", runtime.GOARCH)
	// case "oskversion":
	// 	output, err := host.Info()
	// 	if err != nil { return "", "", err }
	// 	data = output.KernelVersion
	// case "ostype":
	// 	data = fmt.Sprintf("%s", runtime.GOOS)
	// case "osuser":
	// 	output, err := user.Current()
	// 	if err != nil { return "", "", err }
	// 	data = output.Username
	// case "osversion":
	// 	output, err := host.Info()
	// 	if err != nil { return "", "", err }
	// 	data = output.PlatformVersion
	// case "ram":
	// 	output, err := mem.VirtualMemory()
	// 	if err != nil { return "", "", err }
	// 	data = fmt.Sprintf("%v",output.Total/(1024*1024*1024))
	// case "osdistro":
	// 	output, err := host.Info()
	// 	if err != nil { return "", "", err }
	// 	data = output.Platform
	// case "osfamily":
	// 	output, err := host.Info()
	// 	if err != nil { return "", "", err }
	// 	data = output.PlatformFamily
	// case "cpu":
	// 	output, err := cpu.Info()
	// 	if err != nil { return "", "", err }
	// 	data = fmt.Sprintf("%v",output[0].Cores)
	// case "init":
	// 	cli := fmt.Sprintf("ps -p 1 -o comm=")
	// 	output, _, cErrSrc, errSrc := RunCLILocal(cli)
	// 	if err != nil {
	// 		customErr = fmt.Sprintf("❌ Error getting init > %s > ", cErrSrc)
	// 		return "", customErr, errSrc
	// 	}
	// 	if strings.Contains(string(output), "systemd") {
	// 		data = "systemd (cgroup v2)"
	// 	} else {
	// 		data = "initd (likely cgroup v1)"
	// 	}
	// case "netinfos":
	// 	// vm:ip
	// 	ip, cerr, err := OsPropertyGet("net-ip")
	// 	if err != nil {
	// 		return "", cerr, err
	// 	}
	// 	data = fmt.Sprintf("ip: %s", ip)
	// case "osinfos":
	// 	// os:family :: os:pft :: os:version :: os:kversion
	// 	output, err := host.Info()
	// 	if err != nil {
	// 		return "", "", err
	// 	}
	// 	data = fmt.Sprintf("%-6s :: %-10s :: %-6s :: %s", output.PlatformFamily, output.Platform, output.PlatformVersion, output.KernelVersion)
	// case "selstatus":
	// 	result := "disabled" // Default value
	// 	if selinux.GetEnabled() {
	// 		result = "enabled"
	// 	}
	// 	data = result
	// case "selmode":
	// 	result := "unknown" // Default value
	// 	switch selinux.EnforceMode() {
	// 	case selinux.Enforcing:
	// 		result = "enforcing"
	// 	case selinux.Permissive:
	// 		result = "permissive"
	// 	case selinux.Disabled:
	// 		result = "disabled"
	// 	}
	// 	data = result
	// case "selinfos":
	// 	// selinux:status :: selinux:mode
	// 	status, cerr, err := OsPropertyGet("selstatus")
	// 	if err != nil {
	// 		return "", cerr, err
	// 	}
	// 	mode, cerr, err := OsPropertyGet("selmode")
	// 	if err != nil {
	// 		return "", cerr, err
	// 	}
	// 	data = fmt.Sprintf("status: %-10s :: mode: %s",
	// 		status, mode)

	case "vminfos":
		// vm:arch :: vm:ram :: vm:cpu :: vm:uuid :: os:cgroup
		ram, cerr, err := OsPropertyGet("ram")
		if err != nil {
			return "", cerr, err
		}
		cpu, cerr, err := OsPropertyGet("cpu")
		if err != nil {
			return "", cerr, err
		}
		uuid, cerr, err := OsPropertyGet("uuid")
		if err != nil {
			return "", cerr, err
		}
		cgroup, cerr, err := OsPropertyGet("cgroup")
		if err != nil {
			return "", cerr, err
		}
		init, cerr, err := OsPropertyGet("init")
		if err != nil {
			return "", cerr, err
		}
		data = fmt.Sprintf("ram: %s Gb  cpu: %s   cgroup: %s   initd: %s  uuid: %s",
			ram, cpu, cgroup, init, uuid)
	default:
		// Handle unknown property
		customErr = fmt.Sprintf("❌ Unknown property requested: %s", property)
		return "", customErr, fmt.Errorf("")
	}
	return data, "", nil
}
