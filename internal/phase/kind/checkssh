/*
Copyright Â© 2025 AB TRANSITION IT abtransitionit@hotmail.com
*/
package kbe

import (
	"fmt"
	"os"
	"strings"

	"github.com/abtransitionit/luc/internal/config"
	"github.com/abtransitionit/luc/pkg/logx"
	"github.com/abtransitionit/luc/pkg/util"
	"github.com/jedib0t/go-pretty/table"
	"github.com/jedib0t/go-pretty/text"
)

type SshStatus struct {
	Node          string
	SshConfigured bool
	SshReachable  bool
}

// for all Nodes
var NodeSshStatusMap = map[string]SshStatus{}

const CheckSshDescription = "check all nodes of the KBE clusters are SSH reachable."

func checkSsh(arg ...string) (string, error) {
	logx.L.Info(CheckSshDescription)

	// initialize the map
	NodeSshStatusMap = map[string]SshStatus{}

	// convert the list of nodes to a go slice
	SliceNodes := strings.Fields(config.KbeListNode)

	// check nodes are SSH configured
	logx.L.Info("check nodes are SSH configured")
	for _, node := range SliceNodes {
		isSshConfigured, err := util.IsVmSshConfigured(node)
		if err != nil {
			return "", fmt.Errorf("node: %s: %v", node, err)
		}
		// Fill the map with a structure instance for each Node
		NodeSshStatusMap[node] = SshStatus{
			Node:          node,
			SshConfigured: isSshConfigured,
			SshReachable:  false, // default value for now
		}

	} // for

	// check nodes are SSH reachable
	logx.L.Info("check nodes are SSH reachable")
	for _, node := range strings.Fields(config.KbeListNode) {
		isSssReachable, err := util.IsSshConfiguredVmSshReachable(node)
		if err != nil {
			logx.L.Debugf("%s", err)
			continue
		}
		// update the map for each node
		nodeStatus := NodeSshStatusMap[node]
		nodeStatus.SshReachable = isSssReachable
		NodeSshStatusMap[node] = nodeStatus

	} // for
	logx.L.Info("Display the results")
	ShowMapSshStatus()
	// on SUCCESS
	return "", nil
}

// pretty display
func ShowMapSshStatus() {
	t := table.NewWriter()
	t.SetOutputMirror(os.Stdout)
	t.SetStyle(table.StyleLight)
	t.Style().Title.Align = text.AlignCenter

	t.SetTitle("SSH Status for Cluster nodes")
	t.AppendHeader(table.Row{"Node", "SSH Configured", "SSH Reachable"})

	for _, status := range NodeSshStatusMap {
		t.AppendRow(table.Row{
			status.Node,
			status.SshConfigured,
			status.SshReachable,
		})
	}

	t.Render()
}

// display
// fmt.Printf("Node   %-5s ssh configured: %v\n", node, isSshConfigured)
// display
// fmt.Printf("Node   %-5s ssh reachable: %v\n", node, isSssReachable)
