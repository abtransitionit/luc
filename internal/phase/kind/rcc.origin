/*
Copyright © 2025 AB TRANSITION IT abtransitionit@hotmail.com
*/
package kind

import (
	"fmt"
	"strings"

	"github.com/abtransitionit/luc/internal/config"
	"github.com/abtransitionit/luc/pkg/logx"
	rcp "github.com/abtransitionit/luc/pkg/pipeline/rc"
	"github.com/abtransitionit/luc/pkg/util"
)

const RccDescription = "Add line(s) to non-root user custom RC file."

func rcc(arg ...string) (string, error) {
	logx.L.Info(RccDescription)

	// define var
	customRcFilePath := "$HOME/.profile.luc "
	line := fmt.Sprintf("source %s", customRcFilePath)

	// create a custom RC user file (on remote) - not using a pipeline
	vms := strings.Fields(config.KindVm)
	for _, vm := range vms {
		logx.L.Debugf("[%s] creating file on remote: %s", vm, customRcFilePath)
		cli := fmt.Sprintf("luc do TouchFile %s", customRcFilePath)
		outp, err := util.RunCLIRemote(vm, cli)
		if err != nil {
			logx.L.Debugf("%v: %s", err, outp)
			return "", err
		}
		logx.L.Debugf("[%s] created file on remote: %s", vm, customRcFilePath)
	} // vm loop

	// add one line to user RC file (on remote) - using a pipeline
	_, err := rcp.RunPipeline(config.KindVm, RcFilePath, line)
	if err != nil {
		logx.L.Debugf("%s", err)
		return "", err
	}

	// // get persisted envar PATH (on remote)
	// pathTmpFile := config.KindPathFile
	// logx.L.Infof("gettting persisted path from %s.", pathTmpFile)
	// persistedPath, err := util.GetPersistedPath(pathTmpFile)
	// if err != nil {
	// 	logx.L.Debugf("❌ Error detected 6")
	// 	return "", err
	// }
	// success
	return "", nil
}

// // get persisted envar PATH (on remote)
// pathTmpFile := config.KindPathFile
// logx.L.Infof("gettting persisted path from %s.", pathTmpFile)
// persistedPath, err := util.GetPersistedPath(pathTmpFile)
// if err != nil {
// 	logx.L.Debugf("❌ Error detected 6")
// 	return "", err
// }

// 	logx.L.Infof("adding line to rc file %s.", RcFilePath)
// 	if err := util.AddLineToFile(RcFilePath, line); err != nil {
// 		logx.L.Debugf("Error:", err)
// 	}
// 	logx.L.Infof("Line added or already present in %s.", RcFilePath)

// 	// gettting persisted path
// 	pathTmpFile := config.KindPathFile
// 	logx.L.Infof("gettting persisted path from %s.", pathTmpFile)
// 	if err := util.AddLineToFile(RcFilePath, line); err != nil {
// 		logx.L.Debugf("Error:", err)
// 	}
// 	logx.L.Infof("got persisted path : %s")

// 	// // build a tree PATH
// 	// basePath := "/usr/local/bin"
// 	// logx.L.Debugf("building tree path from: '%s'", basePath)
// 	// treePath, err := util.BuildPath(basePath)
// 	// if err != nil {
// 	// 	logx.L.Debugf("❌ Error detected 7")
// 	// 	return "", err
// 	// }

// 	// // update PATH with this tree path
// 	// updatedPath, err := util.UpdPath(treePath)
// 	// if err != nil {
// 	// 	logx.L.Debugf("❌ Error detected 8")
// 	// 	return "", err
// 	// }

// 	// // add instruction
// 	// logx.L.Info("adding instruction to rc file")
// 	// line = "export PATH=" + updatedPath
// 	// err = util.AddLineToFile(customRcFilePath, line)
// 	// if err != nil {
// 	// 	return "", err
// 	// }

// 	// // add instruction
// 	// logx.L.Info("adding instruction to rc file")
// 	// line = "export CNI_PATH=/usr/local/bin/cni"
// 	// err = util.AddLineToFile(customRcFilePath, line)
// 	// if err != nil {
// 	// 	return "", err
// 	// }

// 	return "", nil
// }

// 	logx.L.Infof("adding line to rc file %s.", RcFilePath)
// 	if err := util.AddLineToFile(RcFilePath, line); err != nil {
// 		logx.L.Debugf("Error:", err)
// 	}
// 	logx.L.Infof("Line added or already present in %s.", RcFilePath)

// 	// gettting persisted path
// 	pathTmpFile := config.KindPathFile
// 	logx.L.Infof("gettting persisted path from %s.", pathTmpFile)
// 	if err := util.AddLineToFile(RcFilePath, line); err != nil {
// 		logx.L.Debugf("Error:", err)
// 	}
// 	logx.L.Infof("got persisted path : %s")

// 	// // build a tree PATH
// 	// basePath := "/usr/local/bin"
// 	// logx.L.Debugf("building tree path from: '%s'", basePath)
// 	// treePath, err := util.BuildPath(basePath)
// 	// if err != nil {
// 	// 	logx.L.Debugf("❌ Error detected 7")
// 	// 	return "", err
// 	// }

// 	// // update PATH with this tree path
// 	// updatedPath, err := util.UpdPath(treePath)
// 	// if err != nil {
// 	// 	logx.L.Debugf("❌ Error detected 8")
// 	// 	return "", err
// 	// }

// 	// // add instruction
// 	// logx.L.Info("adding instruction to rc file")
// 	// line = "export PATH=" + updatedPath
// 	// err = util.AddLineToFile(customRcFilePath, line)
// 	// if err != nil {
// 	// 	return "", err
// 	// }

// 	// // add instruction
// 	// logx.L.Info("adding instruction to rc file")
// 	// line = "export CNI_PATH=/usr/local/bin/cni"
// 	// err = util.AddLineToFile(customRcFilePath, line)
// 	// if err != nil {
// 	// 	return "", err
// 	// }

// 	return "", nil
// }
